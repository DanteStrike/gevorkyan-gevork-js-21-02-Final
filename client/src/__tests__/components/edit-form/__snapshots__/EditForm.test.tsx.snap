// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component Footer should render correctly snapshot default test 1`] = `
<ForwardRef(InternalForm)
  className="edit-form"
  form={
    Object {
      "__INTERNAL__": Object {
        "itemRef": [Function],
      },
      "getFieldError": [Function],
      "getFieldInstance": [Function],
      "getFieldValue": [Function],
      "getFieldsError": [Function],
      "getFieldsValue": [Function],
      "getInternalHooks": [Function],
      "isFieldTouched": [Function],
      "isFieldValidating": [Function],
      "isFieldsTouched": [Function],
      "isFieldsValidating": [Function],
      "resetFields": [Function],
      "scrollToField": [Function],
      "setFields": [Function],
      "setFieldsValue": [Function],
      "submit": [Function],
      "validateFields": [Function],
    }
  }
  initialValues={
    Object {
      "dateOfBirth": "1996-04-30T19:26:49.610Z",
      "gender": "female",
      "name": "anyFN antLN",
      "phone": "phone",
      "picture": "url",
    }
  }
  layout="vertical"
  name="edit"
  onFinish={[Function]}
  size="middle"
  validateTrigger="onSubmit"
>
  <FormItem
    getValueFromEvent={[Function]}
    label="key 'editForm.avatar (en-US)' returned an object instead of string."
    name="picture"
    noStyle={true}
    valuePropName="file"
  >
    <Upload
      accept="image/*"
      action=""
      beforeUpload={[Function]}
      className="edit-form__avatar"
      customRequest={[Function]}
      data={Object {}}
      disabled={false}
      listType="picture-card"
      multiple={false}
      name="avatar"
      onChange={[Function]}
      showUploadList={false}
      supportServerRender={true}
      type="select"
    >
      <Avatar
        shape="circle"
        size="default"
        src="url"
        style={
          Object {
            "height": "100%",
            "width": "100%",
          }
        }
      />
    </Upload>
  </FormItem>
  <FormItem
    label="Full name:"
    name="name"
    rules={
      Array [
        [Function],
        [Function],
      ]
    }
  >
    <Input
      placeholder="Input full name"
      type="text"
    />
  </FormItem>
  <FormItem
    label="Gender:"
    name="gender"
    rules={
      Array [
        [Function],
      ]
    }
  >
    <ForwardRef(InternalSelect)>
      <Option
        value="male"
      >
        Male
      </Option>
      <Option
        value="female"
      >
        Female
      </Option>
      <Option
        value="other"
      >
        Other
      </Option>
    </ForwardRef(InternalSelect)>
  </FormItem>
  <FormItem
    label="Date of birth:"
    name="dateOfBirth"
    rules={
      Array [
        [Function],
        [Function],
      ]
    }
  >
    <Picker
      className="edit-form__date-picker"
      disabledDate={[Function]}
      placeholder="Choose date"
    />
  </FormItem>
  <FormItem
    label="Phone:"
    name="phone"
    rules={
      Array [
        [Function],
        Object {
          "message": "Input correct phone",
          "pattern": /\\^\\\\\\+\\?7\\(\\\\d\\{10\\}\\)\\$/,
        },
      ]
    }
  >
    <Input
      type="text"
    />
  </FormItem>
  <FormItem
    className="edit-form__last"
  >
    <Memo(SubmitButton)
      loading={false}
    >
      Save
    </Memo(SubmitButton)>
  </FormItem>
</ForwardRef(InternalForm)>
`;

exports[`Component Footer should render correctly snapshot loading test 1`] = `
<ForwardRef(InternalForm)
  className="edit-form"
  form={
    Object {
      "__INTERNAL__": Object {
        "itemRef": [Function],
      },
      "getFieldError": [Function],
      "getFieldInstance": [Function],
      "getFieldValue": [Function],
      "getFieldsError": [Function],
      "getFieldsValue": [Function],
      "getInternalHooks": [Function],
      "isFieldTouched": [Function],
      "isFieldValidating": [Function],
      "isFieldsTouched": [Function],
      "isFieldsValidating": [Function],
      "resetFields": [Function],
      "scrollToField": [Function],
      "setFields": [Function],
      "setFieldsValue": [Function],
      "submit": [Function],
      "validateFields": [Function],
    }
  }
  initialValues={
    Object {
      "dateOfBirth": "1996-04-30T19:26:49.610Z",
      "gender": "female",
      "name": "anyFN antLN",
      "phone": "phone",
      "picture": "url",
    }
  }
  layout="vertical"
  name="edit"
  onFinish={[Function]}
  size="middle"
  validateTrigger="onSubmit"
>
  <FormItem
    getValueFromEvent={[Function]}
    label="key 'editForm.avatar (en-US)' returned an object instead of string."
    name="picture"
    noStyle={true}
    valuePropName="file"
  >
    <Upload
      accept="image/*"
      action=""
      beforeUpload={[Function]}
      className="edit-form__avatar"
      customRequest={[Function]}
      data={Object {}}
      disabled={false}
      listType="picture-card"
      multiple={false}
      name="avatar"
      onChange={[Function]}
      showUploadList={false}
      supportServerRender={true}
      type="select"
    >
      <Avatar
        shape="circle"
        size="default"
        src="url"
        style={
          Object {
            "height": "100%",
            "width": "100%",
          }
        }
      />
    </Upload>
  </FormItem>
  <FormItem
    label="Full name:"
    name="name"
    rules={
      Array [
        [Function],
        [Function],
      ]
    }
  >
    <Input
      placeholder="Input full name"
      type="text"
    />
  </FormItem>
  <FormItem
    label="Gender:"
    name="gender"
    rules={
      Array [
        [Function],
      ]
    }
  >
    <ForwardRef(InternalSelect)>
      <Option
        value="male"
      >
        Male
      </Option>
      <Option
        value="female"
      >
        Female
      </Option>
      <Option
        value="other"
      >
        Other
      </Option>
    </ForwardRef(InternalSelect)>
  </FormItem>
  <FormItem
    label="Date of birth:"
    name="dateOfBirth"
    rules={
      Array [
        [Function],
        [Function],
      ]
    }
  >
    <Picker
      className="edit-form__date-picker"
      disabledDate={[Function]}
      placeholder="Choose date"
    />
  </FormItem>
  <FormItem
    label="Phone:"
    name="phone"
    rules={
      Array [
        [Function],
        Object {
          "message": "Input correct phone",
          "pattern": /\\^\\\\\\+\\?7\\(\\\\d\\{10\\}\\)\\$/,
        },
      ]
    }
  >
    <Input
      type="text"
    />
  </FormItem>
  <FormItem
    className="edit-form__last"
  >
    <Memo(SubmitButton)
      loading={true}
    >
      Save
    </Memo(SubmitButton)>
  </FormItem>
</ForwardRef(InternalForm)>
`;
